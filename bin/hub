#!/bin/bash
verbose=""
purge=false
function common {
    repos=($(comm -12 <(find $1 -maxdepth 1 -not -path ".repos" -exec basename {} \;| grep -v .repos | sort) <(find $2 -maxdepth 1 -exec basename {} \; | grep -v ".repos"| sort) ))
    for repo in "${repos[@]}"
    do
        if $purge
        then
            echo "Purging $1/$repo"
            rm -rf $1/$repo
        else
            echo "$repo"
        fi
        done
}

function pull {
    echo "hub -p(ull) will be deprecated in favor of repos"
    for i in `\ls -d */` ;
    do
      cd ${i}
      git stash
      git checkout master;
      git pull;
      git checkout -
      git stash pop
      cd - > /dev/null
    done
}

function _remote_branches {
    # ideally use git for-each-ref
    branches=( $(git --no-pager branch ${verbose} $remote) )
    # if remote-tracking branches are not updated use git ls-remotes --heads
    for branch in "${branches[@]}"
    do
        [[ $branch =~ "origin/HEAD" ]] && continue
        [[ $branch =~ "origin/master" ]] && continue
        [[ $branch =~ "origin/main" ]] && continue
        [[ $branch =~ "->" ]] && continue
        echo -e "\t ${branch}"
    done
}

function branches {
    for i in `ls -d */` ;
    do
      cd ${i} ;
      if [ -z ${remote} ]
      then
          branches=$(git branch ${remote} | wc -l)
          if [ ${branches} -gt 1 ]
          then
            echo ${i};
            git --no-pager branch ${verbose}
          fi
      else
          echo ${i};
          _remote_branches
      fi
      cd - > /dev/null;
    done
}

function status {
    for i in `ls -d */`;
    do
        cd ${i}
        modified=$(git status -s | wc -l)
        if [ ${modified} -gt 0 ]
        then
            echo ${i}
            git status -s
        fi
        cd - > /dev/null;
   done
}

function prune {
    for i in `ls -d */`;
    do
        cd ${i}
        git remote prune origin
        cd - > /dev/null
    done
}

function list_stash {
    for i in `ls -d */`;
    do
        cd ${i}
        modified=$(git --no-pager stash list | wc -l)
        if [ ${modified} -gt 0 ]
        then
            echo ${i}
            git --no-pager stash list
        fi
        cd - > /dev/null;
   done
}
op=exit
while getopts ":brslvcpx" opt;
do
    case ${opt} in
        v)
            verbose=" -v"
        ;;
        c)
            op=common
        ;;
        p)
            purge=true
        ;;
        r)
            remote=" -r"
        ;;
        b)
            op=branches
        ;;
        s)
            op=status
        ;;
        l)
            op=list_stash
        ;;
        x)
            op=prune
        ;;
        \?)
            echo "Invalid option"
            exit -1
        ;;
    esac
done
shift $(($OPTIND -1))
params=$@
eval ${op} ${params}
